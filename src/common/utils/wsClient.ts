import type { SubChatListInterface } from '@/features/chatList/types';
import type { SubChatRoomInterface } from '@/features/chatRoom/types';
import { Stomp, type Frame, type IFrame, type StompSubscription } from '@stomp/stompjs';
import SockJS from 'sockjs-client';

const wsUrl = import.meta.env.VITE_WS_URL || '';
const socket = new SockJS(wsUrl);
const stompClient = Stomp.over(socket);

// --------- ChatRoom per-room subscriptions ---------
const subChatRooms = new Map<number, StompSubscription>();

export const subChatRoomSocket = (chatRoomId: number, callback: (data: SubChatRoomInterface) => void) => {
  if (!stompClient.connected) return;

  // Ï§ëÎ≥µ Íµ¨ÎèÖ Î∞©ÏßÄ
  const prev = subChatRooms.get(chatRoomId);
  prev?.unsubscribe();

  const sub = stompClient.subscribe(`/sub/chatroom/${chatRoomId}`, message => {
    const data = JSON.parse(message.body) as SubChatRoomInterface;
    callback(data);
  });

  subChatRooms.set(chatRoomId, sub);

  return () => {
    sub.unsubscribe();
    subChatRooms.delete(chatRoomId);
    console.log('Ïñ∏ÎßàÏö¥Ìä∏Îêú Ï±ÑÌåÖÎ∞© Íµ¨ÎèÖ Ìï¥Ï†ú');
  };
};

// --------- ChatList global subscription (single) ---------
let chatListSub: StompSubscription | null = null;
const chatListListeners = new Set<(data: SubChatListInterface) => void>();

/** ÎÇ¥Î∂ÄÏö©: Ïã§Ï†ú STOMP Íµ¨ÎèÖ ÏãúÏûë (Ïù¥ÎØ∏ ÏûàÏúºÎ©¥ Ïä§ÌÇµ) */
const startChatListSubscription = () => {
  if (!stompClient.connected || chatListSub) return;

  chatListSub = stompClient.subscribe('/user/sub', message => {
    const data = JSON.parse(message.body) as SubChatListInterface;
    chatListListeners.forEach(cb => cb(data));
  });

  console.log('üì¨ ChatList Íµ¨ÎèÖ ÏãúÏûë');
};

/** ÎÇ¥Î∂ÄÏö©: Íµ¨ÎèÖ Ìï¥Ï†ú */
const stopChatListSubscription = () => {
  chatListSub?.unsubscribe();
  chatListSub = null;
  console.log('üì™ ChatList Íµ¨ÎèÖ Ìï¥Ï†ú');
};

/**
 * Ïô∏Î∂Ä API: ChatList Ïä§Ìä∏Î¶º Î¶¨Ïä§ÎÑà Îì±Î°ù
 * - ÏÜåÏºìÏù¥ Ïù¥ÎØ∏ Ïó∞Í≤∞ÎêòÏñ¥ ÏûàÏúºÎ©¥ Ï¶âÏãú Íµ¨ÎèÖ ÏãúÏûë
 * - Ïó∞Í≤∞ÎêòÍ∏∞ Ï†ÑÏù¥Î©¥ onConnectÏóêÏÑú ÏûêÎèô ÏãúÏûë
 * - Î∞òÌôòÎêú Ìï®Ïàò Ìò∏Ï∂úÌïòÎ©¥ Ìï¥Îãπ Î¶¨Ïä§ÎÑàÎßå Ï†úÍ±∞
 */
export const subChatListSocket = (callback: (data: SubChatListInterface) => void) => {
  chatListListeners.add(callback);
  // Ïó∞Í≤∞Îèº ÏûàÏúºÎ©¥ Î∞îÎ°ú Î≥¥Ïû•
  startChatListSubscription();

  return () => {
    chatListListeners.delete(callback);
    // Îçî Ïù¥ÏÉÅ Î¶¨Ïä§ÎÑàÍ∞Ä ÏóÜÏúºÎ©¥ Íµ¨ÎèÖÎèÑ Ï†ïÎ¶¨ (Î©îÎ™®Î¶¨/Ìä∏ÎûòÌîΩ Ï†àÏïΩ)
    if (chatListListeners.size === 0) {
      stopChatListSubscription();
    }
  };
};

// --------- Connect / Disconnect ----------
export const connectSocket = () => {
  return new Promise((resolve, reject) => {
    if (stompClient.connected) {
      resolve(true);
      return;
    }

    // Ïó∞Í≤∞ ÏÑ±Í≥µ ÏãúÏ†êÏóê Í∏ÄÎ°úÎ≤å ChatList Íµ¨ÎèÖ Î≥¥Ïû•
    // (Ïû¨Ïó∞Í≤∞ ÏãúÏóêÎèÑ ÏûêÎèô Ïû¨Íµ¨ÎèÖ)
    stompClient.onConnect = _frame => {
      console.log('WebSocket onConnect');
      startChatListSubscription(); // Ïó¨Í∏∞ÏÑú ÏûêÎèô Íµ¨ÎèÖ
      resolve(true);
    };

    stompClient.onStompError = frame => {
      console.error('STOMP Error:', frame);
    };

    stompClient.connect(
      {},
      // Íµ¨Î≤ÑÏ†Ñ ÏΩúÎ∞± (onConnectÍ∞Ä Ïù¥ÎØ∏ ÏûàÏúºÎØÄÎ°ú Ïó¨Í∏∞ÏÑ† noop Í∞ÄÎä•)
      (_frame: IFrame) => {},
      (error: Frame | CloseEvent) => {
        console.error('WebSocket Ïó∞Í≤∞ Ïã§Ìå®', error);
        reject(error);
      },
    );
  });
};

export const disconnectSocket = () => {
  if (stompClient && stompClient.connected) {
    // ÎÅäÍ∏∞ Ï†ÑÏóê Í∏ÄÎ°úÎ≤å Íµ¨ÎèÖ Ìï¥Ï†ú
    stopChatListSubscription();

    // Î£∏ Íµ¨ÎèÖÎì§ÎèÑ Ï†ïÎ¶¨
    subChatRooms.forEach(sub => sub.unsubscribe());
    subChatRooms.clear();

    stompClient.disconnect(() => {
      console.log('üõë WebSocket Ïó∞Í≤∞ Ìï¥Ï†ú ÏôÑÎ£å');
    });
  }
};

// Ïó∞Í≤∞ ÎÅäÍπÄ Ïù¥Î≤§Ìä∏ (ÏÑúÎ≤Ñ/ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÇ¨Ïú† Îì±)
stompClient.onWebSocketClose = (event: CloseEvent) => {
  console.warn('üí• WebSocket Ïó∞Í≤∞ ÎÅäÍπÄ:', event);

  // ÏïàÏ†Ñ: ÏÜåÏºìÏù¥ ÎπÑÏ†ïÏÉÅ Ï¢ÖÎ£åÎêòÏóàÏùÑ ÎïåÎèÑ Íµ¨ÎèÖ Ìï∏Îì§ Ï†ïÎ¶¨
  stopChatListSubscription();
  subChatRooms.forEach(sub => sub.unsubscribe());
  subChatRooms.clear();
};

export { stompClient };
